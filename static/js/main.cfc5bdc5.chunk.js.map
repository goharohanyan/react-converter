{"version":3,"sources":["components/ConvertingUnits.js","components/ToBeConvertedUnits.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["selectStyle","margin","width","color","divStyle","fontSize","textAlign","ConvertingUnits","props","InputLabel","id","Select","value","convertingResultUnit","onChange","style","MenuItem","Divider","resultCount","btnStyles","left","transform","marginBottom","CssTextField","withStyles","root","borderBottomColor","borderColor","TextField","ToBeConvertedUnits","label","type","variant","inputValue","onInputChange","Button","onClick","wrapperDivStyle","position","top","display","flexDirection","boxShadow","borderRadius","backgroundColor","padding","marginTop","Main","useState","convertedUnit","setConvertedUnit","convertingUnit","setConvertingUnit","convertedCount","setConvertedCount","setResultCount","toBeConvertedUnit","event","target","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfc5bdc5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TextField, MenuItem, Select, Divider, InputLabel } from '@material-ui/core';\r\n\r\nconst selectStyle = {\r\n    margin : 20,\r\n    width: \"100%\",\r\n    color: \"#43A047\"\r\n};\r\n\r\nconst divStyle = {\r\n    color: \"#707070\",\r\n    fontSize: \"20px\",\r\n    textAlign: \"center\"\r\n};\r\n\r\nfunction ConvertingUnits(props) {\r\n    return (\r\n        <div>\r\n            <InputLabel id=\"demo-simple-select-label\">Measure units</InputLabel>\r\n            <Select value={props.convertingResultUnit} onChange={props.onChange} style={selectStyle} >\r\n                <MenuItem value={\"meter\"}>Meter</MenuItem>\r\n                <MenuItem value={\"mile\"}>Mile</MenuItem>\r\n                <MenuItem value={\"yard\"}>Yard</MenuItem>\r\n                <MenuItem value={\"inch\"}>Inch</MenuItem>\r\n                <MenuItem value={\"feet\"}>Feet</MenuItem>\r\n            </Select>\r\n            <Divider />\r\n            <div style={divStyle} > Result: {props.resultCount} </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ConvertingUnits};","import React from 'react';\r\nimport { Button, TextField, MenuItem, Select, Divider, withStyles, InputLabel, FormControl } from '@material-ui/core';\r\n\r\nconst selectStyle = {\r\n    margin : 20,\r\n    width: \"100%\",\r\n    color: \"#43A047\"\r\n};\r\n\r\nconst btnStyles =  {\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, 0%)\",\r\n    marginBottom: \"20px\",\r\n}\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n      '& label.Mui-focused': {\r\n        color: '#43A047',\r\n      },\r\n      '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#707070',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        '& fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction ToBeConvertedUnits(props) {\r\n\r\n    return (\r\n        <div>\r\n            <InputLabel id=\"demo-simple-select-label\">Measure units</InputLabel>\r\n            <Select label=\"asds\" value={props.ToBeConvertedUnits} onChange={props.onChange} style={selectStyle} >\r\n                <MenuItem value={\"meter\"}>Meter</MenuItem>\r\n                <MenuItem value={\"mile\"}>Mile</MenuItem>\r\n                <MenuItem value={\"yard\"}>Yard</MenuItem>\r\n                <MenuItem value={\"inch\"}>Inch</MenuItem>\r\n                <MenuItem value={\"feet\"}>Feet</MenuItem>\r\n            </Select>\r\n\r\n            <Divider />\r\n            {/* <TextField label=\"How much to convert...\" InputLabelProps={{shrink: true}} onChange={props.onInputChange} style={selectStyle} /> */}\r\n            <CssTextField type='text' variant='outlined' style={selectStyle} label='How much to convert...' value={props.inputValue} \r\n                                onChange={props.onInputChange}   />\r\n            <Divider />\r\n            <Button onClick={props.onClick} style={btnStyles}> Convert </Button>\r\n            <Divider style={{marginBottom : '10px'}} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {ToBeConvertedUnits};","import React, { useState, useEffect } from 'react';\r\nimport { ConvertingUnits } from './ConvertingUnits';\r\nimport { ToBeConvertedUnits } from './ToBeConvertedUnits';\r\n\r\nconst wrapperDivStyle={\r\n    position: 'absolute', left: '50%', top: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"50%\",\r\n    boxShadow: \"2px 4px 11px 7px #093f0b\",\r\n    borderRadius: \"20px\",\r\n    backgroundColor: \"white\",\r\n    padding: \"60px\",\r\n    marginTop: \"20px\",\r\n};\r\n\r\n\r\nfunction Main() {\r\n    const [convertedUnit, setConvertedUnit] = useState('');\r\n    const [convertingUnit, setConvertingUnit] = useState('');\r\n    const [convertedCount, setConvertedCount] = useState('');\r\n    const [resultCount, setResultCount] = useState('');\r\n\r\n    const onConvertedSelect = (event) => {\r\n        setConvertedUnit(event.target.value);\r\n    };\r\n\r\n    const onConvertingSelect = (event) => {\r\n        setConvertingUnit(event.target.value)\r\n    };\r\n\r\n    const onTextFieldChange = (event) => {\r\n        setConvertedCount(event.target.value);\r\n    };\r\n    \r\n    const onConverterBtn = (event) => {\r\n        debugger;\r\n        if(!convertedUnit || !convertingUnit) {\r\n            alert(\"Please, choose measure units for converting\");\r\n        } else if(!convertedCount || !(+convertedCount)) {\r\n            alert(\"Please, input number as converting count\");\r\n        } else {\r\n            if (convertedUnit === \"meter\") {\r\n                if (convertingUnit === \"meter\") {\r\n                    setResultCount(+convertedCount * 1);\r\n                } else if (convertingUnit === \"mile\") {\r\n                    setResultCount(+convertedCount * 0.0006213);                    \r\n                } else if (convertingUnit === \"yard\") {\r\n                    setResultCount(+convertedCount * 1.0936);\r\n                } else if (convertingUnit === \"inch\") {\r\n                    setResultCount(+convertedCount * 39.37);                    \r\n                } else if (convertingUnit === \"feet\") {\r\n                    setResultCount(+convertedCount * 3.2808);                    \r\n                }\r\n            }\r\n            if (convertedUnit === \"mile\") {\r\n                if (convertingUnit === \"meter\") {\r\n                    setResultCount(+convertedCount * 1609.344);\r\n                } else if (convertingUnit === \"mile\") {\r\n                    setResultCount(+convertedCount * 1);                    \r\n                } else if (convertingUnit === \"yard\") {\r\n                    setResultCount(+convertedCount * 1760);\r\n                } else if (convertingUnit === \"inch\") {\r\n                    setResultCount(+convertedCount * 63360);                    \r\n                } else if (convertingUnit === \"feet\") {\r\n                    setResultCount(+convertedCount * 5380);                    \r\n                }\r\n            }\r\n            if (convertedUnit === \"yard\") {\r\n                if (convertingUnit === \"meter\") {\r\n                    setResultCount(+convertedCount * 0.9144);\r\n                } else if (convertingUnit === \"mile\") {\r\n                    setResultCount(+convertedCount * 0.0005681);                    \r\n                } else if (convertingUnit === \"yard\") {\r\n                    setResultCount(+convertedCount * 1);\r\n                } else if (convertingUnit === \"inch\") {\r\n                    setResultCount(+convertedCount * 36);                    \r\n                } else if (convertingUnit === \"feet\") {\r\n                    setResultCount(+convertedCount * 3);                    \r\n                }\r\n            }\r\n            if (convertedUnit === \"inch\") {\r\n                if (convertingUnit === \"meter\") {\r\n                    setResultCount(+convertedCount * 0.0254);\r\n                } else if (convertingUnit === \"mile\") {\r\n                    setResultCount(+convertedCount * 0.00001578);                    \r\n                } else if (convertingUnit === \"yard\") {\r\n                    setResultCount(+convertedCount * 0.278);\r\n                } else if (convertingUnit === \"inch\") {\r\n                    setResultCount(+convertedCount * 1);                    \r\n                } else if (convertingUnit === \"feet\") {\r\n                    setResultCount(+convertedCount * 0.833);                    \r\n                }\r\n            }\r\n            if (convertedUnit === \"feet\") {\r\n                if (convertingUnit === \"meter\") {\r\n                    setResultCount(+convertedCount * 0.3048);\r\n                } else if (convertingUnit === \"mile\") {\r\n                    setResultCount(+convertedCount * 0.0001894);                    \r\n                } else if (convertingUnit === \"yard\") {\r\n                    setResultCount(+convertedCount * 0.(3));\r\n                } else if (convertingUnit === \"inch\") {\r\n                    setResultCount(+convertedCount * 12);                    \r\n                } else if (convertingUnit === \"feet\") {\r\n                    setResultCount(+convertedCount * 1);                    \r\n                }\r\n            }\r\n                      \r\n            // alert(resultCount);\r\n        }\r\n        \r\n    };\r\n\r\n    return (\r\n        <div style={wrapperDivStyle} >\r\n            <ToBeConvertedUnits  toBeConvertedUnit={convertedUnit} onChange={onConvertedSelect} \r\n                                onClick={onConverterBtn} onInputChange={onTextFieldChange}  />\r\n            <ConvertingUnits  onChange={onConvertingSelect} resultCount={resultCount} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Main;","import Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}